@using Microsoft.AspNetCore.Http
@using petnb.DTL.Models

@using System.Linq
@using Microsoft.AspNetCore.Http.Authentication

@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager


@{
    var loginProviders = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToList();

}
@{
    var fullName = "";
    var userId = "";
    var token = HttpContextAccessor.HttpContext.Session.GetString("FirebaseToken");
    var signedIn = SignInManager.IsSignedIn(User);
    var jsSigned = "";
    ApplicationUser user;
}

@if (signedIn)
{
    user = await UserManager.GetUserAsync(User);
    fullName = user.FullName;
    userId = user.Id;
    jsSigned = "true";
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - petnb</title>

    <link rel="stylesheet" href="~/vendor.min.css"/>
    <link rel="stylesheet" href="~/css/styles.css">
    <link href="https://fonts.googleapis.com/css?family=Quicksand:400,500,700" rel="stylesheet">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.1/css/all.css" integrity="sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf" crossorigin="anonymous">

</head>
<body>

    <nav class="custom-navbar navbar-expand-md">

        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#collapsibleNavbar">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse custom-menu-items" id="collapsibleNavbar">
            <div class="logo-placeholder">
                <div class="logo-background">
                    <a class="navbar-brand petnb-logo" asp-controller="Home" asp-action="Index"></a>
                </div>
            </div>
            <ul class="navbar-nav">
                <li class="nav-item ">
                    <a class="menu-underline nav-item-underline" href="#">Find petsitter</a>
                </li>
                <li class="nav-item">
                    <a class="menu-underline nav-item-underline" href="#">Become petsitter</a>
                </li>
                <li class="nav-item">
                    <a class="menu-underline nav-item-underline" href="#">About</a>
                </li>
            </ul>
            @await Html.PartialAsync("_LoginPartial")
        </div>

    </nav>


    <div class="col-md-12 login-modal hidden" id="login-overlay">
        <div class="login-form col-md-4 mx-auto">
            <div class="close-button" id="close-btn">
                <i class="fas fa-times"></i>
            </div>

            <form id="ajax-login-form">
                <br />
                <h4 class="main-heading">Sign in with</h4>
                <hr />
                <div id="input-container">
                    <div class="form-group">
                        <label class="custom-login">
                            Email
                            <input id="email" placeholder="Type your email" class="form-control" />
                        </label>
                    </div>
                    <div class="form-group">
                        <label class="custom-login">
                            Password
                            <input id="password" placeholder="Type your password" type="password" class="form-control" />
                        </label>
                    </div>
                    <div class="form-group">
                        <div class="checkbox">
                            <label class="custom-login">
                                <input id="rememberMe" type="checkbox" />
                                Remember me?
                            </label>
                        </div>
                    </div>
                </div>
                <br />
                <br />
                <h4 class="main-heading text-center">Or sign in with</h4>
                <br />
            </form>


            <form asp-controller="Account" asp-action="ExternalLogin" asp-route-returnurl="" method="post" class="form-horizontal">
                <div>
                    <p>
                        @foreach (var provider in loginProviders)
                        {
                            <button type="submit" class="btn btn-default" name="provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">@provider.Name</button>
                        }
                    </p>
                </div>
            </form>
            <br />
            <div class="login-btn-container">
                <a id="login-btn-ajax-submit" class="ajax-login-submit">Log in</a>
            </div>


            @*<div class="form-group">
                    <p>
                        <a asp-action="ForgotPassword">Forgot your password?</a>
                    </p>
                    <p>
                        <a asp-action="Register" asp-route-returnurl="@ViewData["ReturnUrl"]">Register as a new user?</a>
                    </p>
                </div>*@

        </div>
    </div>


    @RenderBody()

    <script src="~/vendor.min.js"></script>
<script src="~/js/site.js"></script>
<script src="https://www.gstatic.com/firebasejs/5.10.0/firebase.js"></script>
    @RenderSection("Scripts", required: false)

    <script>
    let allChats = [];
    let recipientFullName = [];
        let messages;
        let firebaseCurrentUserFullName;
        let firebaseCurrentUserPicture;
        let firstTime = true;

    const config = {
        apiKey: "AIzaSyCoKatVz8xlteNJGwY5hg_tDWEQ36foOGI",
        authDomain: "frontend-69cae.firebaseapp.com",
        databaseURL: "https://frontend-69cae.firebaseio.com",
        projectId: "frontend-69cae",
        storageBucket: "frontend-69cae.appspot.com",
        messagingSenderId: "574904259542"
    };
        firebase.initializeApp(config);

    var isSignedIn = @jsSigned;
    const userId = "@Html.Raw(userId)";
    const fullName = "@Html.Raw(fullName)";
    //include image


    const token = "@Html.Raw(token)";

    if (isSignedIn) {

        var user = firebase.auth().currentUser;
        if (user == null) {
            signIn();

        }
    
        initializeUser(userId, fullName);//include image

    }

    
        //execute after login
    function initializeUser(userId, fullName) {
        const usersRef = firebase.database().ref('Users/');

        usersRef.child(userId).once('value',
            function (snapshot) {
                if (snapshot.exists()) {
                    //alert('exists');
                } else {
                    usersRef.child(userId).set(userId);
                    usersRef.child(userId).set({
                        FullName: fullName
                        //include image
                    });

                }
            });
    }

    function signIn() {
        firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION)
            .then(function () {
                // Existing and future Auth states are now persisted in the current
                // session only. Closing the window would clear any existing state even
                // if a user forgets to sign out.
                // ...
                // New sign-in will be persisted with session persistence.

                return firebase.auth().signInWithCustomToken(token);

            }).then(function () {
                user = firebase.auth().currentUser;

            })
            .catch(function (error) {
                // Handle Errors here.
                var errorCode = error.code;
                var errorMessage = error.message;
            });
    }

    </script>


    <script>

    const login = document.getElementById("login-btn-ajax");
    const close = document.getElementById("close-btn");
    const loginModal = document.getElementById("login-overlay");
    const ajaxSubmitBtn = document.getElementById("login-btn-ajax-submit");
    const loginFrom = document.getElementById("ajax-login-form");

    attachOnClickListeners();

    function attachOnClickListeners() {
        login.addEventListener("click",
            function() {
                loginModal.classList.toggle("hidden");
                document.getElementsByTagName('body')[0].style.overflowY = 'hidden';
                slideIn();
            });

        close.addEventListener("click", slideOut);

        ajaxSubmitBtn.addEventListener("click",
            function () {
                loginAjax();
            });
    }


    async function slideOut() {
       document.getElementsByTagName('body')[0].style.overflowY = 'visible';
       loginModal.classList.toggle("custom-slide-out");
       loginModal.style.cssText = "top:-999px; bottom:999px";
       await sleep(200);
       loginModal.classList.toggle("custom-slide-out");
       loginModal.classList.toggle("hidden");
   }

    //function createErrorMsg() {
    //    var errorMsg = document.createElement('div');
    //    errorMsg.setAttribute("id", "error-msg");
    //    loginFrom.prepend(errorMsg);
    //}

    function loginAjax() {
        const email = document.getElementById("email").value;
        const password = document.getElementById("password").value;
        const rememberMe = document.getElementById("rememberMe").checked;
        $.ajax({
            type: "POST",
            url: "@Url.Action("AjaxLogin","Account")",
            beforeSend: function(xhr) {
                xhr.setRequestHeader("XSRF-TOKEN",
                    $('input:hidden[name="__RequestVerificationToken"]').val());
            },
            contentType: "application/json; /*cha*/rset=utf-8",
            dataType: "json",
            data: JSON.stringify({
                email: email,
                password: password,
                rememberMe: rememberMe
            }),
            success: function (response) {
                location.reload();
            },
            error: function (response) {
                //createErrorMsg();
               // document.getElementById("error-msg").innerHTML = response.responseText;
                send();
            }
        });
    }

    const xMax = 16;
    const shake = anime({
        targets: '#input-container',
        easing: 'easeInOutSine',
        duration: 550,
        translateX: [
            {
                value: xMax * -1,
            },
            {
                value: xMax,
            },
            {
                value: xMax/-2,
            },
            {
                value: xMax/2,
            },
            {
                value: 0,
            }
        ],
        autoplay: false,
    });

    const colorAnims = [
        anime({
            targets: '#js-login-form',
            borderTopColor: '#FF4848',
            easing: 'linear',
            duration: 500,
            autoplay: false,
        }),
        anime({
            targets: '.form-group input',
            borderColor: '#FF4848',
            easing: 'linear',
            duration: 200,
            autoplay: false,

        }),
    ];

    const send = () => {
        shake.restart();
        colorAnims.forEach(a => a.restart());
    };
    const slideIn = () => {
        modalSlideIn.forEach(a => a.restart());
    }
    const modalSlideIn = [
        anime({
        targets: '#login-overlay',
        top: '0px',
        bottom: '0px',
        autoplay: false,

        }),
        anime({
            targets: 'body',
            overflowY:'hidden'

        })
    ];




    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    </script>

</body>
</html>

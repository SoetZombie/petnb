@using System.Security.Claims
@using Microsoft.AspNetCore.Http
@using petnb.DTL.Models
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

@{
    var token = HttpContextAccessor.HttpContext.Session.GetString("FirebaseToken");
}
<script>
    console.log("");
</script>

<div class="messages-grid-container">
    <div class="messages-filter" id="messages-filter">

        @*<div class="person-message" >
                <div class="profile-picture-message">
                    <p>@Conversation.MessageReceiver</p>
                </div>
            </div>*@

    </div>
    <div class="messages-placeholder">
        <div class="messages-content">
        
                    <div>
                        <div class="message-sender">

                            <div style="background-image: url(https://cdn.images.express.co.uk/img/dynamic/11/590x/KKSKS-717334.jpg)" class="message-picture"></div>
                            <span class="message">MessageText</span>


                        </div>
                    </div>
               
                    <div>
                        <div class="message-receiver">

                            <span class="message">MessageText</span>
                            <div style="background-image: url(https://cdn.images.express.co.uk/img/dynamic/11/590x/KKSKS-717334.jpg)" class="message-picture"></div>


                        </div>
        
        </div>
        <div class="message-input-placeholder">
            <input class="message-input-field-text" type="text" />
            <button id="sendMsg" type="submit" class="message-send-btn">
                <svg class="svgIcon send-msg-svg" height="28px" width="26px" version="1.1" viewBox="0 0 16 16" x="0px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" y="0px">
                <path d="M11,8.3L2.6,8.8C2.4,8.8,2.3,8.9,2.3,9l-1.2,4.1c-0.2,0.5,0,1.1,0.4,1.5C1.7,14.9,2,15,2.4,15c0.2,0,0.4,0,0.6-0.1l11.2-5.6 C14.8,9,15.1,8.4,15,7.8c-0.1-0.4-0.4-0.8-0.8-1L3,1.1C2.5,0.9,1.9,1,1.5,1.3C1,1.7,0.9,2.3,1.1,2.9L2.3,7c0,0.1,0.2,0.2,0.3,0.2 L11,7.7c0,0,0.3,0,0.3,0.3S11,8.3,11,8.3z" fill="#65C2AD">
                    </path>
                </svg>
            </button>
        </div>
    </div>
</div>

<script src="https://www.gstatic.com/firebasejs/5.10.0/firebase.js"></script>


</div>
<script>



    var senderRef, receiverRef;
    let allChats;

    const id2 = "karel";
    //  const messagesRef = firebase.database().ref(`Messages/Thread/${returnThread(id1, id2)}`);

    async function getAllChats() {
        return new Promise((resolve, reject) => {

            var chats = [];
            const allChatsRef =  firebase.database().ref(`Users/${userId}/Messages`);
            allChatsRef.once('value').then(function (snapshot) {
                //could have just called populateFilter() from here;
                snapshot.forEach(function(childSnap) {
                    chats.push(childSnap.key);
                    // console.log(childSnap.val())
                });
                allChats = chats;
                if (chats.length == 0) {
                    reject(new Error ('user not initialized or without chats'));
                }
                else {
                    resolve(chats);
                }
            })
            setTimeout(function() {
                reject(new Error('request timed out'));
            }, 5000);


        })
    }

    //modify to accept senderId and receiverId as id1 id2
    function checkThread() {
        //user get from firebase
       // initializeUser(id1);
        //save as value somewhere
        initializeUser(id2);
        //Modify to include /Messages/
        senderRef = firebase.database().ref(`Users/${userId}/Messages/${returnThread(userId, id2)}`);
        receiverRef = firebase.database().ref(`Users/${id2}/Messages/${returnThread(userId, id2)}`);
    }


    
    async function populateFilter() {
        await getAllChats().then(response => {
            console.log(allChats);
            
            for (var i = 0; i < allChats.length; i++) {

                const personMessage = createNode('div');
                const profilePictureMessage = createNode('div');
                const userName = createNode('p');
                const filterNode = document.getElementById('messages-filter');
                const recepiendId = allChats[i].toString().replace(userId, "");
                console.log(recepiendId);
                var recipientName;
                 firebase.database().ref(`Users/${recepiendId}`).child('FullName').once('value').then(
                    function (snapshot) {
                         console.log(snapshot.val());
                    });

                console.log(allChats);

                personMessage.classList.add('person-message');
                profilePictureMessage.classList.add('profile-picture-message');
                userName.innerHTML = recipientName;

                appendElement(filterNode, personMessage);
                appendElement(personMessage, profilePictureMessage);
                appendElement(profilePictureMessage, userName);

            }

        }).catch(function(err) {
            console.log(err);
        });
    }

    function sendMsg() {


        var something = {
            message: "nasrat",
            time: new Date().toDateString(),
            sender: firebase.auth().currentUser.uid

        }
        senderRef.push(something);
        receiverRef.push(something);
    }


    

    function returnThread(uid1, uid2) {

        if (uid1 < uid2) {
            return uid1 + uid2;
        } else {
            return uid2 + uid1;
        }
    }

    function createNode(node) {
        return document.createElement(node);
    }

    function appendElement(parent, elementToAppend) {
        parent.appendChild(elementToAppend);
    }


</script>


<noscript>
    firebase.auth().signInWithCustomToken(token).catch(function(error) {
    // Handle Errors here.
    var errorCode = error.code;
    var errorMessage = error.message;
    console.log(errorMessage);
    console.log("succ");
    // ...
    }).then(function() {
    console.log(firebase.auth().currentUser);


    const id1 = "adrian";
    const id2 = "guillem";
    //  const messagesRef = firebase.database().ref(`Messages/Thread/${returnThread(id1, id2)}`);
    const messagesRef = firebase.database().ref('Messages/Thread/');
    var something = {
    message: "nasrat",
    time: new Date().toDateString(),
    sender: firebase.auth().currentUser.uid

    }

    messagesRef.push(something);
    var test = messagesRef.child("adrianguillem")
    console.log(test);

    messagesRef.child("adrianguillem").once('value', function(snapshot) {
    if (snapshot.exists()) {
    alert('exists');
    }
    });
    //messagesRef.orderByKey.equalTo(returnThread(id1, id2)).once("value",
    //    snapshot => {
    //        if (snapshot.exists()) {
    //            const userData = snapshot.val();
    //            console.log("exists!", userData);
    //        } else {
    //            console.log("kokote")
    //        }
    //    });

    });
</noscript>
@using System.Security.Claims
@using Microsoft.AspNetCore.Http
@using petnb.DTL.Models
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

@{
    var token = HttpContextAccessor.HttpContext.Session.GetString("FirebaseToken");
}
<script>
</script>

<div class="messages-grid-container">
    <div class="messages-filter" id="messages-filter">

        @*<div class="person-message" >
                <div class="profile-picture-message">
                    <p>@Conversation.MessageReceiver</p>
                </div>
            </div>*@

    </div>
    <div class="messages-placeholder">
        <div class="messages-content" id="messages-content">
        
                    <div>
                        <div class="message-sender">

                            <div style="background-image: url(https://cdn.images.express.co.uk/img/dynamic/11/590x/KKSKS-717334.jpg)" class="message-picture"></div>
                            <span class="message">MessageText</span>


                        </div>
                    </div>
               
                    <div>
                        <div class="message-receiver">

                            <span class="message">MessageText</span>
                            <div style="background-image: url(https://cdn.images.express.co.uk/img/dynamic/11/590x/KKSKS-717334.jpg)" class="message-picture"></div>


                        </div>
        
        </div>
    </div>
        <div class="message-input-placeholder">
            <input class="message-input-field-text" id="message-input-field-text"type="text" />
            <button id="sendMsg" type="submit" class="message-send-btn">
                <svg class="svgIcon send-msg-svg" height="28px" width="26px" version="1.1" viewBox="0 0 16 16" x="0px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" y="0px">
                <path d="M11,8.3L2.6,8.8C2.4,8.8,2.3,8.9,2.3,9l-1.2,4.1c-0.2,0.5,0,1.1,0.4,1.5C1.7,14.9,2,15,2.4,15c0.2,0,0.4,0,0.6-0.1l11.2-5.6 C14.8,9,15.1,8.4,15,7.8c-0.1-0.4-0.4-0.8-0.8-1L3,1.1C2.5,0.9,1.9,1,1.5,1.3C1,1.7,0.9,2.3,1.1,2.9L2.3,7c0,0.1,0.2,0.2,0.3,0.2 L11,7.7c0,0,0.3,0,0.3,0.3S11,8.3,11,8.3z" fill="#65C2AD">
                    </path>
                </svg>
            </button>
        </div>
</div>




</div>
<script>
    
    function loadData() {

        if (typeof firebase != 'undefined') {
           // checkThread();
            populateFilter();
        }
    }

    setTimeout(loadData, 300);
    //console.log(firebase)
    
    
  

    var senderRef, receiverRef, currentUserId, currentUserPicuture;

    const id2 = "236df250-26e2-4740-8cf3-5a42a86fc0cf";
    //  const messagesRef = firebase.database().ref(`Messages/Thread/${returnThread(id1, id2)}`);

    async function getAllChats() {
        return new Promise((resolve, reject) => {

            var chats = [];
            var recipientNames = [];
           
            const allChatsRef =  firebase.database().ref(`Users/${userId}/Messages`);
            allChatsRef.once('value').then(function (snapshot) {
                //could have just called populateFilter() from here;
                snapshot.forEach(function(childSnap) {
                    chats.push(childSnap.key);
                   
                    //var snap = childSnap.val();
                    //var recipientKey = Object.keys(snap)[0];
                    //Remember these lines. I spent 1 hour doing them realizing that key is not child.child of massages ;]
                    //recipientFullName = childSnap.val()[recipientKey].RecipientFullName;
                    recipientNames.push(childSnap.val().RecipientFullName);
                    
                });
                allChats = chats;
                recipientFullName = recipientNames;
                messages = snapshot.val();
                if (chats.length == 0) {
                    reject(new Error ('user not initialized or without chats'));
                }
                else {
                    resolve(chats, recipientFullName);
                }
            })
            setTimeout(function() {
                reject(new Error('request timed out'));
            }, 5000);


        })
    }

    //modify to accept senderId and receiverId as id1 id2
    function switchChat(recipientId) {
        receiverRef = firebase.database().ref(`Users/${recipientId}/Messages/${returnThread(userId, recipientId)}`);
        senderRef = firebase.database().ref(`Users/${userId}/Messages/${returnThread(userId, recipientId)}`);

        senderRef.once('value').then(function (snapshot) {
            //same goes for creating user picture
            if (!snapshot.child('RecipientFullName').exists() || !snapshot.child('RecipientProfilePicture').exists()) {

                firebase.database().ref(`Users/${recipientId}`).once('value').then(function(snapshot) {

                    senderRef.set({
                        RecipientFullName: snapshot.val().FullName,
                        RecipientProfilePicture: snapshot.val().ProfilePicture
                    });
                });
            };
        });

        receiverRef.once('value').then(function(snapshot) {
            if (!snapshot.child('RecipientFullName').exists() || !snapshot.child('RecipientProfilePicture').exists()) {

                firebase.database().ref(`Users/${userId}`).once('value').then(function(snapshot) {

                    receiverRef.set({
                        RecipientFullName: snapshot.val().FullName,
                        RecipientProfilePicture: snapshot.val().ProfilePicture
                    });
                });
            };
        });

        document.getElementById('messages-content').innerHTML = "";
        populateChat(recipientId);
        document.getElementById('sendMsg').removeEventListener('click', sendMsg);
        document.getElementById('sendMsg').addEventListener('click', sendMsg);
        firstTime = true;
        subscribeToChat();
        document.getElementById('messages-content').scrollTop = 9999;



    }

    function checkThread() {
        //user get from firebase
        // initializeUser(id1);
        //save as value somewhere
        // initializeUser(id2);
        //Modify to include /Messages/
        senderRef = firebase.database().ref(`Users/${userId}/Messages/${returnThread(userId, id2)}`);
        receiverRef = firebase.database().ref(`Users/${id2}/Messages/${returnThread(userId, id2)}`);
        senderRef.once('value').then(function (snapshot) {
            //same goes for creating user picture
            if (!snapshot.child('RecipientFullName').exists() || !snapshot.child('RecipientProfilePicture').exists()) {

                firebase.database().ref(`Users/${id2}`).once('value').then(function(snapshot) {

                    senderRef.set({
                        RecipientFullName: snapshot.val().FullName,
                        RecipientProfilePicture: snapshot.val().ProfilePicture
                    });
                });
            };
        });

        receiverRef.once('value').then(function(snapshot) {
            if (!snapshot.child('RecipientFullName').exists() || !snapshot.child('RecipientProfilePicture').exists()) {

                firebase.database().ref(`Users/${userId}`).once('value').then(function(snapshot) {

                    receiverRef.set({
                        RecipientFullName: snapshot.val().FullName,
                        RecipientProfilePicture: snapshot.val().ProfilePicture
                    });
                });
            };
        });
    }


    async function populateFilter() {
        await getAllChats().then(response => {

            const filterNode = document.getElementById('messages-filter');
            Object.keys(messages).forEach(function(item) {

                const personMessage = createNode('div');
                const profilePictureMessage = createNode('div');
                const userName = createNode('p');
                const recipientId = item.toString().replace(userId, "");

                personMessage.classList.add('person-message');
                profilePictureMessage.classList.add('profile-picture-message');

                appendElement(filterNode, personMessage);
                appendElement(personMessage, profilePictureMessage);
                appendElement(profilePictureMessage, userName);

                userName.innerHTML = messages[item].RecipientFullName;

                personMessage.value = recipientId;
                //TODO: Include img
            });
            var allChats = document.getElementsByClassName('person-message');
            for(let i = 0; i < allChats.length; i++) {
                allChats[i].addEventListener("click",
                    function() {

                        switchChat(this.value);

                        if (document.getElementsByClassName('selected').length !== 0) {

                            document.getElementsByClassName('selected')[0].classList.toggle('selected');

                        }
                        this.classList.toggle('selected');
                    });
            }
            const firstChat = document.getElementsByClassName('person-message')[0];

            firstChat.click();
            firstChat.classList.add('selected');


               

            
            //legacy for loop

            //const filterNode = document.getElementById('messages-filter');
            //for (var i = 0; i < allChats.length; i++) {

            //    const personMessage = createNode('div');
            //    const profilePictureMessage = createNode('div');
            //    const userName = createNode('p');
            //    const recipientId = allChats[i].toString().replace(userId, "");
            //    //rewrite so that you dont need allchats but just messages;
            //    personMessage.classList.add('person-message');
            //    personMessage.value = recipientId;
            //    console.log(messages);
            //    profilePictureMessage.classList.add('profile-picture-message');
            //    userName.innerHTML = recipientFullName[i];

            //    appendElement(filterNode, personMessage);
            //    appendElement(personMessage, profilePictureMessage);
            //    appendElement(profilePictureMessage, userName);

            //}

        }).catch(function(err) {
            console.log(err);
        });
    }

    var thread;
    var chat;
    function populateChat(recipientId) {
        
        if (messages != null ) {
        thread = messages[returnThread(userId, recipientId)];

       
        chat = Object.values(thread);
        //var messagesNode = [];
        console.log(thread)
        const messagesNode = document.getElementById('messages-content');

        var recipientImage = thread.RecipientProfilePicture;
        firebaseCurrentUserPicture = thread.RecipientProfilePicture;
        for (var i = 0; i < chat.length; i++) {
            const picture = createNode('div');
            picture.classList.add('message-picture');
            picture.innerHTML = recipientImage;
            
            if (typeof chat[i].message != 'undefined') {
                const messageWrap = createNode('div');
                const messageSender = createNode('div');
                const message = createNode('span')
                //check who is who depends on db 
                if (chat[i].sender == userId) {
                    messageSender.classList.add('message-sender')
                    //
                } else {
                    messageSender.classList.add('message-receiver')
                    appendElement(messageSender, picture);
                    console.log(picture);
                }

                message.innerHTML = chat[i].message;
                message.classList.add('message');
                messageSender.insertBefore(message, messageSender.firstChild);
                appendElement(messageWrap, messageSender);
                appendElement(messagesNode, messageWrap); 


            }
            
        }
        }
    }

    function subscribeToChat() {
            const messagesNode = document.getElementById('messages-content');
            senderRef.off();
            senderRef.on('value',
                function (snapshot) {
                    if (!firstTime) {
                        var data = snapshot.val();
                        var transpiled = Object.values(data);
                        if (transpiled.length != 2) {

                        
                        var messageToAdd = transpiled[transpiled.length - 3];


                        const messageWrap = createNode('div');
                        const messageSender = createNode('div');
                        const message = createNode('span')
                        if (messageToAdd.sender === userId) {
                            //TODO: redo to include actuall user picture;
                            messageSender.classList.add('message-sender')
                            const picture = createNode('div');
                            picture.classList.add('message-picture');
                            picture.innerHTML = firebaseCurrentUserPicture;
                            appendElement(messageSender, picture);

                        } else {
                            messageSender.classList.add('message-receiver')
                            const picture = createNode('div');
                            picture.classList.add('message-picture');
                            picture.innerHTML = firebaseCurrentUserPicture;
                            appendElement(messageSender, picture);
                        }

                        message.innerHTML = messageToAdd.message;
                        message.classList.add('message');

                        if (messageSender.classList.contains('message-sender')) {

                            appendElement(messageSender, message);
                        } else {
                            messageSender.insertBefore(message, messageSender.firstChild);
                        }
                        appendElement(messageWrap, messageSender);
                        appendElement(messagesNode, messageWrap);
                            messagesNode.scrollTop = 9999;
                        
                        }
                    } else {
                        firstTime = false;
                    }
                });
        
        }
    
    function sendMsg() {
        var inputNode = document.getElementById('message-input-field-text');
        var msg = inputNode.value;

        var something = {
            message: msg,
            time: new Date().toDateString(),
            sender: firebase.auth().currentUser.uid

        }
        senderRef.push(something);
        receiverRef.push(something);
        inputNode.value = "";
    }

    

    function returnThread(uid1, uid2) {

        if (uid1 < uid2) {
            return uid1 + uid2;
        } else {
            return uid2 + uid1;
        }
    }

    function createNode(node) {
        return document.createElement(node);
    }

    function appendElement(parent, elementToAppend) {
        parent.appendChild(elementToAppend);
    }


</script>


<noscript>
    firebase.auth().signInWithCustomToken(token).catch(function(error) {
    // Handle Errors here.
    var errorCode = error.code;
    var errorMessage = error.message;
    console.log(errorMessage);
    console.log("succ");
    // ...
    }).then(function() {
    console.log(firebase.auth().currentUser);


    const id1 = "adrian";
    const id2 = "guillem";
    //  const messagesRef = firebase.database().ref(`Messages/Thread/${returnThread(id1, id2)}`);
    const messagesRef = firebase.database().ref('Messages/Thread/');
    var something = {
    message: "nasrat",
    time: new Date().toDateString(),
    sender: firebase.auth().currentUser.uid

    }

    messagesRef.push(something);
    var test = messagesRef.child("adrianguillem")
    console.log(test);

    messagesRef.child("adrianguillem").once('value', function(snapshot) {
    if (snapshot.exists()) {
    alert('exists');
    }
    });
    //messagesRef.orderByKey.equalTo(returnThread(id1, id2)).once("value",
    //    snapshot => {
    //        if (snapshot.exists()) {
    //            const userData = snapshot.val();
    //            console.log("exists!", userData);
    //        } else {
    //            console.log("kokote")
    //        }
    //    });

    });
</noscript>